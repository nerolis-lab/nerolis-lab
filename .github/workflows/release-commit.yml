name: Release commit

on:
  workflow_dispatch:
    inputs:
      commit_sha:
        description: 'Commit SHA to release'
        required: true
        type: string
      environment:
        description: 'Environment to release to'
        required: true
        type: string
        default: 'development'

jobs:

  common:
    name: Build Common
    uses: ./.github/workflows/build-test.yml
    with:
      working-directory: 'common'
      commit_sha: ${{ inputs.commit_sha }}

  frontend:
    name: Build Frontend
    needs: common
    uses: ./.github/workflows/build-test.yml
    with:
      working-directory: 'frontend'
      needs-common-build: true
      commit_sha: ${{ inputs.commit_sha }}

  backend:
    name: Build Backend
    needs: common
    uses: ./.github/workflows/build-test.yml
    with:
      working-directory: 'backend'
      needs-common-build: true
      commit_sha: ${{ inputs.commit_sha }}

  docs:
    name: Build Docs
    needs: common
    if: ${{ inputs.environment == 'production' }}
    uses: ./.github/workflows/build-test.yml
    with:
      working-directory: 'docs'
      needs-common-build: true
      commit_sha: ${{ inputs.commit_sha }}

  release:
    name: Release Commit
    needs: [frontend, backend, docs]
    if: |
      always() &&
      (needs.frontend.result == 'success' || needs.frontend.result == 'skipped') &&
      (needs.backend.result == 'success' || needs.backend.result == 'skipped') &&
      (needs.docs.result == 'success' || needs.docs.result == 'skipped')
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '*-${{ inputs.commit_sha }}'
      
      - name: Display artifact structure
        run: |
          echo "Downloaded artifacts:"
          ls -la
          echo "Frontend artifacts structure:"
          ls -la frontend-${{ inputs.commit_sha }}/ 2>/dev/null || echo "No frontend artifacts directory"
          echo "Backend artifacts structure:"
          ls -la backend-${{ inputs.commit_sha }}/ 2>/dev/null || echo "No backend artifacts directory"
          echo "Docs artifacts structure:"
          ls -la docs-${{ inputs.commit_sha }}/ 2>/dev/null || echo "No docs artifacts directory"
      
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy backend to server
        run: |
          echo "[${{ inputs.environment }}] Deploying backend..."
          
          # Check for backend artifacts
          if [ ! -d "backend-${{ inputs.commit_sha }}" ]; then
            echo "✗ Backend artifacts not found at: backend-${{ inputs.commit_sha }}"
            exit 1
          fi
          
          echo "✓ Backend artifacts found"
          echo "Backend files: $(find backend-${{ inputs.commit_sha }} -type f | wc -l)"
          
          # Create deployment directory structure on server
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_HOST }} "mkdir -p ${{ vars.DEPLOY_DIR }}/backend"
          
          # Deploy backend files
          rsync -az --delete -e "ssh -o StrictHostKeyChecking=no" backend-${{ inputs.commit_sha }}/ ${{ secrets.SSH_HOST }}:${{ vars.DEPLOY_DIR }}/backend/
          
          # Deploy backend assets to web server
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_HOST }} "rsync -a --chown=www-data:www-data ${{ vars.DEPLOY_DIR }}/backend/assets/ /var/www/backend --delete"
          
          echo "✓ Backend deployment complete!"

      - name: Deploy frontend dist
        run: |
          echo "[${{ inputs.environment }}] Deploying frontend..."
          
          # Check for frontend artifacts
          if [ ! -d "frontend-${{ inputs.commit_sha }}" ]; then
            echo "✗ Frontend artifacts not found at: frontend-${{ inputs.commit_sha }}"
            exit 1
          fi
          
          echo "✓ Frontend artifacts found"
          echo "Frontend files: $(find frontend-${{ inputs.commit_sha }} -type f | wc -l)"
          
          # Deploy frontend files
          rsync -az --delete -e "ssh -o StrictHostKeyChecking=no" frontend-${{ inputs.commit_sha }}/ ${{ secrets.SSH_HOST }}:${{ vars.FRONTEND_DIR }}/
          
          echo "✓ Frontend deployment complete!"

      - name: Deploy docs dist
        if: ${{ inputs.environment == 'production' && vars.DOCS_DIR != '' }}
        run: |
          echo "[${{ inputs.environment }}] Deploying docs..."
          
          # Check for docs artifacts
          if [ ! -d "docs-${{ inputs.commit_sha }}" ]; then
            echo "✗ Docs artifacts not found at: docs-${{ inputs.commit_sha }}"
            exit 1
          fi
          
          echo "✓ Docs artifacts found"
          echo "Docs files: $(find docs-${{ inputs.commit_sha }} -type f | wc -l)"
          
          # Deploy docs files
          rsync -az --delete -e "ssh -o StrictHostKeyChecking=no" docs-${{ inputs.commit_sha }}/ ${{ secrets.SSH_HOST }}:${{ vars.DOCS_DIR }}/
          
          echo "✓ Docs deployment complete!"

      - name: Deploy PM2 services
        run: |
          echo "[${{ inputs.environment }}] Managing PM2 services..."
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_HOST }} << ENDSSH
            # Set environment variables for PM2
            export NODE_ENV="${{ vars.NODE_ENV }}"
            export PORT="${{ vars.PORT }}"
            export DB_HOST="${{ secrets.DB_HOST }}"
            export DB_PORT="${{ secrets.DB_PORT }}"
            export DB_USER="${{ secrets.DB_USER }}"
            export DB_PASS="${{ secrets.DB_PASS }}"
            export DATABASE_NAME="${{ secrets.DATABASE_NAME }}"
            export DATABASE_MIGRATION="${{ vars.DATABASE_MIGRATION }}"
            export ROLLBACK_BATCHES="${{ vars.ROLLBACK_BATCHES }}"
            export GOOGLE_CLIENT_ID="${{ vars.GOOGLE_CLIENT_ID }}"
            export GOOGLE_CLIENT_SECRET="${{ secrets.GOOGLE_CLIENT_SECRET }}"
            export DISCORD_CLIENT_ID="${{ vars.DISCORD_CLIENT_ID }}"
            export DISCORD_CLIENT_SECRET="${{ secrets.DISCORD_CLIENT_SECRET }}"
            export PATREON_CLIENT_ID="${{ vars.PATREON_CLIENT_ID }}"
            export PATREON_CLIENT_SECRET="${{ secrets.PATREON_CLIENT_SECRET }}"
            export PATREON_CREATOR_ACCESS_TOKEN="${{ secrets.PATREON_CREATOR_ACCESS_TOKEN }}"
            export PATREON_CREATOR_REFRESH_TOKEN="${{ secrets.PATREON_CREATOR_REFRESH_TOKEN }}"
            
            # Check if process exists and reload, otherwise start
            if pm2 list | grep -q "${{ vars.APP_NAME }}"; then
              echo "Reloading existing PM2 process..."
              pm2 reload "${{ vars.APP_NAME }}"
            else
              echo "Starting new PM2 process..."
              pm2 start "${{ vars.DEPLOY_DIR }}/backend/index.js" \
                --name "${{ vars.APP_NAME }}" \
                --time
            fi
            
            # Verify process is online
            if pm2 list | grep -q "${{ vars.APP_NAME }}.*online"; then
              echo "✓ ${{ vars.APP_NAME }} deployed successfully"
              pm2 save
            else
              echo "✗ ${{ vars.APP_NAME }} failed to deploy"
              pm2 logs ${{ vars.APP_NAME }} --lines 20
              exit 1
            fi
            
            echo "[${{ inputs.environment }}] Deployment complete!"
          ENDSSH
