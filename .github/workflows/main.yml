name: CI

on:
  push:
    branches: ["main", "develop"]
  pull_request:
    branches: ["main", "develop"]

jobs:
  common:
    name: Common
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Cache common dependencies
        id: cache-common-deps
        uses: actions/cache@v4
        with:
          path: common/node_modules
          key: common-deps-${{ hashFiles('common/package-lock.json') }}
          restore-keys: common-deps-

      - name: Cache common build
        id: cache-common-build
        uses: actions/cache@v4
        with:
          path: common/dist
          key: common-build-${{ hashFiles('common/src/**', 'common/package.json', 'common/tsconfig.json', 'common/rollup.config.mjs') }}

      - name: Install Common Dependencies
        if: steps.cache-common-deps.outputs.cache-hit != 'true'
        run: |
          cd common
          npm ci

      - name: Build Common Library
        if: steps.cache-common-build.outputs.cache-hit != 'true'
        run: |
          cd common
          npm run build || (echo "Build failed! Clearing node_modules and forcing cache refresh..." && rm -rf node_modules package-lock.json && exit 1)

      - name: Test Common Library
        run: |
          cd common
          npm run test

      - name: Upload Common Coverage
        uses: codecov/codecov-action@v4-beta
        with:
          flags: common
          directory: common
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  backend:
    name: Backend
    runs-on: ubuntu-latest
    needs: common
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Restore common build
        uses: actions/cache/restore@v4
        with:
          path: common/dist
          key: common-build-${{ hashFiles('common/src/**', 'common/package.json', 'common/tsconfig.json', 'common/rollup.config.mjs') }}
          fail-on-cache-miss: true

      - name: Cache backend dependencies
        uses: actions/cache@v4
        with:
          path: backend/node_modules
          key: backend-${{ hashFiles('backend/package-lock.json') }}
          restore-keys: backend-

      - name: Install, Build, and Test Backend
        run: |
          cd backend
          npm ci
          npm run build
          npm install -g bun
          bun install
          bun compile
          npm run test

      - name: Upload Backend Coverage
        uses: codecov/codecov-action@v4-beta
        with:
          flags: backend
          directory: backend
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  frontend:
    name: Frontend
    runs-on: ubuntu-latest
    needs: common
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Restore common build
        uses: actions/cache/restore@v4
        with:
          path: common/dist
          key: common-build-${{ hashFiles('common/src/**', 'common/package.json', 'common/tsconfig.json', 'common/rollup.config.mjs') }}
          fail-on-cache-miss: true

      - name: Cache frontend dependencies
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: frontend2-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: frontend-

      - name: Install, Build, and Test Frontend
        run: |
          cd frontend
          npm ci
          npm run build || (echo "Build failed! Clearing node_modules and forcing cache refresh..." && rm -rf node_modules package-lock.json && exit 1)
          npm run test

      - name: Upload Frontend Coverage
        uses: codecov/codecov-action@v4-beta
        with:
          flags: frontend
          directory: frontend
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Cache docs dependencies
        uses: actions/cache@v4
        with:
          path: docs/node_modules
          key: docs-${{ hashFiles('docs/package-lock.json') }}
          restore-keys: docs-

      - name: Install Dependencies
        run: |
          cd docs
          npm ci

      - name: Test Documentation
        run: |
          cd docs
          npm run test

      - name: Build Documentation
        run: |
          cd docs
          npm run build

      - name: Upload Docs Coverage
        uses: codecov/codecov-action@v4-beta
        with:
          flags: docs
          directory: docs
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  lint:
    name: Lint
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Cache root dependencies
        uses: actions/cache@v4
        with:
          path: node_modules
          key: root-${{ hashFiles('package-lock.json') }}
          restore-keys: root-

      - name: Install and Lint
        run: |
          npm ci
          npm run lint

      - name: Lint Commit Messages
        id: commitlint
        uses: wagoid/commitlint-github-action@v6
        continue-on-error: true

      - name: Comment on PR for commit message warnings
        if: github.event_name == 'pull_request' && steps.commitlint.outputs.results != ''
        uses: actions/github-script@v7
        with:
          script: |
            const results = JSON.parse('${{ steps.commitlint.outputs.results }}');
            
            // Check if there are any warnings
            const hasWarnings = results.some(result => result.warnings && result.warnings.length > 0);
            
            // Check if we already commented
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const existingComment = comments.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              (comment.body.includes('Commit Message Warnings') || comment.body.includes('Commit Messages Look Good'))
            );
            
            if (hasWarnings) {
              let warningMessage = '## ‚ö†Ô∏è Commit Message Warnings\n\n';
              warningMessage += 'Your commit messages have some formatting warnings. While these won\'t block the PR, consider fixing them for better consistency:\n\n';
              
              results.forEach(result => {
                if (result.warnings && result.warnings.length > 0) {
                  warningMessage += `### \`${result.hash.substring(0, 7)}\`: ${result.message.split('\n')[0]}\n`;
                  result.warnings.forEach(warning => {
                    warningMessage += `- ‚ö†Ô∏è ${warning}\n`;
                  });
                  warningMessage += '\n';
                }
              });
              
              warningMessage += 'üí° **Tip**: For sentence-case warnings, use lowercase for the first word after the colon (e.g., `feat: add feature` instead of `feat: Add feature`).\n\n';
              warningMessage += '‚ÑπÔ∏è [Learn more about conventional commits](https://www.conventionalcommits.org/)\n\n';
              warningMessage += '<sub>This comment is automatically generated by commitlint.</sub>';

              if (existingComment) {
                // Update existing comment
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: existingComment.id,
                  body: warningMessage
                });
              } else {
                // Create new comment
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: warningMessage
                });
              }
            } else if (existingComment) {
              // No warnings found, but there was a previous comment - update it to show resolution
              const resolvedMessage = '## ‚úÖ Commit Messages Look Good!\n\n';
              resolvedMessage += 'All commit message warnings have been resolved. Thanks for following the conventional commit format!\n\n';
              resolvedMessage += '‚ÑπÔ∏è [Learn more about conventional commits](https://www.conventionalcommits.org/)\n\n';
              resolvedMessage += '<sub>This comment is automatically generated by commitlint.</sub>';

              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: resolvedMessage
              });
            }

  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    needs: [common, backend, frontend, docs, lint]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install dependencies
        run: npm ci

      - name: Run Semantic Release
        run: npm run release
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
